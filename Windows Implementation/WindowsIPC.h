/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class WindowsIPC */

#ifndef _Included_WindowsIPC
#define _Included_WindowsIPC
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     WindowsIPC
 * Method:    createMailslot
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_WindowsIPC_createMailslot
  (JNIEnv *, jobject, jstring);

/*
 * Class:     WindowsIPC
 * Method:    connectToMailslot
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_connectToMailslot
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    createAnonPipe
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_createAnonPipe
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    getAnonPipeMessage
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_WindowsIPC_getAnonPipeMessage
  (JNIEnv *, jobject, jint);

/*
 * Class:     WindowsIPC
 * Method:    createNamedPipeServer
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_createNamedPipeServer
  (JNIEnv *, jobject, jstring);

/*
 * Class:     WindowsIPC
 * Method:    getMessageFromServerEndOfNamedPipe
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_WindowsIPC_getMessageFromServerEndOfNamedPipe
  (JNIEnv *, jobject, jint);

/*
 * Class:     WindowsIPC
 * Method:    writeMessageToNamedPipeServer
 * Signature: (I[B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_writeMessageToNamedPipeServer
  (JNIEnv *, jobject, jint, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    createNamedPipeClient
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_createNamedPipeClient
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    openWinsock
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_WindowsIPC_openWinsock
  (JNIEnv *, jobject);

/*
 * Class:     WindowsIPC
 * Method:    createWinsockClient
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_createWinsockClient
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    createFileMapping
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_createFileMapping
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    openFileMapping
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_WindowsIPC_openFileMapping
  (JNIEnv *, jobject);

/*
 * Class:     WindowsIPC
 * Method:    createDataCopyWindow
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_WindowsIPC_createDataCopyWindow
  (JNIEnv *, jobject);

/*
 * Class:     WindowsIPC
 * Method:    sendDataCopyMessage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_sendDataCopyMessage
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     WindowsIPC
 * Method:    createSemaphore
 * Signature: (Ljava/lang/String;II)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_createSemaphore
  (JNIEnv *, jobject, jstring, jint, jint);

/*
 * Class:     WindowsIPC
 * Method:    openSemaphore
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_openSemaphore
  (JNIEnv *, jobject, jstring);

/*
 * Class:     WindowsIPC
 * Method:    waitForSingleObject
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_waitForSingleObject
  (JNIEnv *, jobject, jint);

/*
 * Class:     WindowsIPC
 * Method:    releaseSemaphore
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_WindowsIPC_releaseSemaphore
  (JNIEnv *, jobject, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
